\ El primer codigo I2C funcional implementado por julian
VARIABLE Rdor
VARIABLE Busv
VARIABLE ADDR
VARIABLE data
VARIABLE MSB
VARIABLE LSB
VARIABLE INAR

: delay_1ms
   d# 8334 begin d# 1 - dup d# 0 = until drop	\ 100MHz
\ d# 4167 begin d# 1 - dup d# 0 = until	\ 50MHz
;

: delay_nms
   d# 0 do delay_1ms loop
;

: delay_10us
   d# 40 begin d# 1 - dup d# 0 = until drop
;

: delay_n_10us
   d# 0 do delay_10us loop
;

: delay_i2c
    d# 3 d# 0 do delay_10us loop
;

: delay_change
    d# 10 d# 0 do delay_10us loop
;

: con-ADDR
    h# 40 ADDR ! 
;

: emit-i2c	\ hecho por el profe
    delay_i2c
    begin i2c_busy @ d# 0 = until 
    i2c_data_wr !
;

: reset_i2c
    begin i2c_busy @ d# 0 = until 
    d# 0 i2c_ena !
    delay_i2c
    d# 1 i2c_ena !
;

: turn-off
    begin i2c_busy @ d# 0 = until 
    d# 0 i2c_ena !
    delay_i2c
;

: wr2-i2c
    begin i2c_busy @ d# 0 = until 
    ADDR dup @ i2c_addr ! drop
    i2c_data_wr !
    d# 0 i2c_rw !
    d# 1 i2c_ena !
    delay_i2c
    begin i2c_busy @ d# 0 = until 
    i2c_data_wr !
    delay_i2c
    begin i2c_busy @ d# 0 = until
    i2c_data_wr !
    delay_i2c
;
\ Esta funcion se emplea cuando quiero indicar que voy a leer informacion del modulo por ende 
\ debo indicar la direccion del modulo y luego la direccion interna del modulo 
: wr1-i2c
    begin i2c_busy @ d# 0 = until   \ Espera a que el modulo este disponible
    \ ADDR @ i2c_addr ! Esto seria lo ideal pero el j1 no lo permite
    ADDR dup @ i2c_addr ! drop      \ Envia la direccion del modulo
    \ ------------------------------------------------------------------------------------------------------------ 
    \ | PASO 1           | | PASO 2           | | PASO 3               | | PASO 4           | | PASO 5           |
    \ ------------------------------------------------------------------------------------------------------------
    \ | direccion (addr) | | h# 40            | | direccion (i2c_addr) | | direccion (addr) | | h# input_funtion |
    \ | direccion (addr) | | direccion (addr) | | h# 40                | | h# input_funtion | |                  |
    \ | h# input_funtion | | h# input_funtion | | direccion (addr)     | |                  | |                  |
    \ |                  | |                  | | h# input_funtion     | |                  | |                  |
    \ ------------------------------------------------------------------------------------------------------------
    \ | ADDR DUP         | | @                | |  i2c_addr            | | !                | | drop             |  
    \ ------------------------------------------------------------------------------------------------------------ 
    i2c_data_wr !
    \ --------------------------------------------------------------------
    \ | PASO 5           | | PASO 6                 | | PASO 7           |
    \ --------------------------------------------------------------------
    \ | h# input_funtion | | direccion (i2c_data_wr)| |                  | 
    \ |                  | | h# input_funtion       | |                  | 
    \ |                  | |                        | |                  | 
    \ |                  | |                        | |                  | 
    \ --------------------------------------------------------------------
    \ | estado inicial   | | i2c_data_wr            | | !                |   
    \ --------------------------------------------------------------------
    d# 0 i2c_rw !  \ Escribe cero en el pin rw indicando que va a escribir
    delay_i2c      \ Retraso reglamentario para que no se repita la lectura de los busys
    d# 1 i2c_ena ! \ escribe uno en el pin ena indicando que el modulo debe iniciar operaciones
    delay_i2c      \ Retraso reglamentario para que no se repita la lectura de los busys 
;

: wt-readi2c
    con-ADDR
    ADDR dup @ i2c_addr ! drop
    i2c_data_wr !
    d# 1 i2c_ena !   
    begin i2c_busy @ d# 0 = until
    d# 1 i2c_rw !
    delay_i2c
    begin i2c_busy @ d# 0 = until
    d# 0 i2c_rw !
    delay_i2c
;

: mode-readi2c
    delay_i2c 
    con-ADDR  
    ADDR dup @ i2c_addr ! drop   
    begin i2c_busy @ d# 0 = until
    d# 1 i2c_rw !
    delay_i2c
    begin i2c_busy @ d# 0 = until
    i2c_data_rd @ 
    delay_i2c
    delay_i2c
    begin i2c_busy @ d# 0 = until
    i2c_data_rd @
;
    
: save-i2c 
    delay_i2c 
    con-ADDR
    ADDR dup @ i2c_addr ! drop
    d# 1 i2c_ena !    
    begin i2c_busy @ d# 0 = until
    d# 1 i2c_rw !
    delay_i2c
    begin i2c_busy @ d# 0 = until
    i2c_data_rd @ 
    delay_i2c
    delay_i2c
    d# 0 i2c_rw !
    begin i2c_busy @ d# 0 = until
    d# 8 lshift 
    i2c_data_rd @
    or dup INAR !
    INAR dup @ gp_out1 ! drop
    INAR dup @ emit-uart drop
;

: multiplicar
    multi_a !
    multi_b ! drop
    d# 1 multi_init !
    begin multi_done @ d# 1 = until
    d# 0 multi_init !
;

: dividir
    div2_dividend_pp_high !
    div2_dividend_pp_low !
    d# 0 div2_divisor_pp_high !
    d# 10 div2_divisor_pp_low !
    d# 1 div2_go !
    begin div2_done @ d# 1 = until
    d# 0 div2_go !
    div2_quotient_pp_high @ gp_out0 ! drop
    div2_quotient_pp_low d# 10 - @ gp_out0 ! drop
    
;

: read-shuntV
;   
 
: calcular-t
;        


: main
  d# 9360000 Rdor ! 
  begin
\ Primero debo asignar el registro de configuracion del modulo
	con-ADDR
   h# 1F h# 3C h# 00
   wr2-i2c
	turn-off
	delay_1ms
\ Indica que va a realizar la lectura del registro de voltaje shunt
\	con-ADDR        \ Inicializa la direccion del ina
	h# 01           \ Deja el primer dato a escribir en el stack
	wr1-i2c
	turn-off
	delay_1ms
\ Lee el voltaje shunt y prepara la lectura del voltaje en el bus   
	h# 02 
	wt-readi2c 
	wr1-i2c
	turn-off
	delay_1ms
\ Lee el voltaje en el bus, escribe en el registro de calibracion y prepara la lectura de la corriente
	h# 00 h# 10 dup h# 05
	wt-readi2c
	wr2-i2c 
	reset_i2c
	h# 04  
	wr1-i2c
	turn-off
	delay_1ms
\  Realiza la lectura de la corriente
	save-i2c
	Rdor dup @ gp_out0 ! drop
	Rdor dup @ swap drop INAR dup @ swap drop -
	Rdor ! drop drop
	Rdor dup @ gp_out0 ! drop 

	turn-off
  again 
;
